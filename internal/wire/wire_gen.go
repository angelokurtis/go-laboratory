// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/angelokurtis/go-laboratory/internal/k8s"
	"github.com/angelokurtis/go-laboratory/internal/kustomize"
	zap2 "github.com/angelokurtis/go-laboratory/internal/zap"
	"github.com/angelokurtis/go-laboratory/internal/zapr"
	"github.com/go-logr/logr"
	"go.uber.org/zap"
	"k8s.io/apimachinery/pkg/api/meta"
	"k8s.io/cli-runtime/pkg/resource"
	"k8s.io/client-go/dynamic"
)

// Injectors from injectors.go:

func ZapLogger() (*zap.Logger, error) {
	encoderConfig := zap2.NewEncoderConfig()
	config := zap2.NewConfig(encoderConfig)
	logger, err := zap2.NewLogger(config)
	if err != nil {
		return nil, err
	}
	return logger, nil
}

func LogrLogger() (logr.Logger, error) {
	encoderConfig := zap2.NewEncoderConfig()
	config := zap2.NewConfig(encoderConfig)
	logger, err := zap2.NewLogger(config)
	if err != nil {
		return logr.Logger{}, err
	}
	logrLogger := zapr.NewLogger(logger)
	return logrLogger, nil
}

func DynamicClient() (dynamic.Interface, error) {
	config := k8s.NewConfig()
	dynamicInterface := k8s.NewDynamicClient(config)
	return dynamicInterface, nil
}

func DynamicClientAndMapper() (*dynamicClientAndMapper, error) {
	config := k8s.NewConfig()
	dynamicInterface := k8s.NewDynamicClient(config)
	restMapper, err := k8s.NewDynamicRESTMapper(config)
	if err != nil {
		return nil, err
	}
	wireDynamicClientAndMapper := &dynamicClientAndMapper{
		Dynamic:    dynamicInterface,
		RESTMapper: restMapper,
	}
	return wireDynamicClientAndMapper, nil
}

func KustomizeClient() (*kustomize.Client, error) {
	fileSystem := kustomize.NewFileSystem()
	kustomizer := kustomize.NewKustomizer()
	client := kustomize.NewClient(fileSystem, kustomizer)
	return client, nil
}

func RESTClientAndRESTMapping() (*clientAndMapping, error) {
	config := k8s.NewConfig()
	restClient, err := k8s.NewRESTClient(config)
	if err != nil {
		return nil, err
	}
	restMapper, err := k8s.NewDynamicRESTMapper(config)
	if err != nil {
		return nil, err
	}
	wireClientAndMapping := &clientAndMapping{
		RESTClient: restClient,
		RESTMapper: restMapper,
	}
	return wireClientAndMapping, nil
}

// injectors.go:

type dynamicClientAndMapper struct {
	Dynamic    dynamic.Interface
	RESTMapper meta.RESTMapper
}

type clientAndMapping struct {
	RESTClient resource.RESTClient
	RESTMapper meta.RESTMapper
}
