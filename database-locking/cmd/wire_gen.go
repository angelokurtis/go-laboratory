// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/angelokurtis/go-laboratory/database-locking/internal/account"
	"github.com/angelokurtis/go-laboratory/database-locking/internal/metrics"
	"github.com/angelokurtis/go-laboratory/database-locking/internal/mysql"
	"github.com/angelokurtis/go-laboratory/database-locking/internal/persistence"
	"github.com/angelokurtis/go-laboratory/database-locking/internal/redis"
	"github.com/google/wire"
)

import (
	_ "github.com/angelokurtis/go-laboratory/database-locking/internal/logging"
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func initialize() (account.Repository, func(), error) {
	db, cleanup, err := mysql.NewDB()
	if err != nil {
		return nil, nil, err
	}

	queries := persistence.New(db)
	defaultRepository := account.NewDefaultRepository(queries)

	return defaultRepository, func() {
		cleanup()
	}, nil
}

func initializeOptimistic() (account.Repository, func(), error) {
	db, cleanup, err := mysql.NewDB()
	if err != nil {
		return nil, nil, err
	}

	queries := persistence.New(db)
	optimisticRepository := account.NewOptimisticRepository(queries)

	return optimisticRepository, func() {
		cleanup()
	}, nil
}

func initializePessimistic() (account.Repository, func(), error) {
	db, cleanup, err := mysql.NewDB()
	if err != nil {
		return nil, nil, err
	}

	queries := persistence.New(db)
	pessimisticRepository := account.NewPessimisticRepository(db, queries)

	return pessimisticRepository, func() {
		cleanup()
	}, nil
}

func initializeDistributed() (account.Repository, func(), error) {
	db, cleanup, err := mysql.NewDB()
	if err != nil {
		return nil, nil, err
	}

	queries := persistence.New(db)
	client := redis.NewClient()
	pool := redis.NewPool(client)
	redsync := redis.NewRedsync(pool)
	distributedRepository := account.NewDistributedRepository(queries, redsync)

	return distributedRepository, func() {
		cleanup()
	}, nil
}

// wire.go:

var providers = wire.NewSet(account.NewDefaultRepository, account.NewDistributedRepository, account.NewOptimisticRepository, account.NewPessimisticRepository, metrics.NewHandler, mysql.NewDB, persistence.New, redis.NewClient, redis.NewPool, redis.NewRedsync)
