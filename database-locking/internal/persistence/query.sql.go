// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package persistence

import (
	"context"
	"database/sql"
)

const getAccountAndLockForUpdates = `-- name: GetAccountAndLockForUpdates :one
SELECT id, username, balance, version
FROM account
WHERE username = ?
LIMIT 1 FOR UPDATE
`

func (q *Queries) GetAccountAndLockForUpdates(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountAndLockForUpdates, username)

	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.Version,
	)

	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :execresult
UPDATE account
SET balance = ?,
    version = version + 1
WHERE id = ?
`

type UpdateAccountBalanceParams struct {
	Balance float64
	ID      int64
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccountBalance, arg.Balance, arg.ID)
}
