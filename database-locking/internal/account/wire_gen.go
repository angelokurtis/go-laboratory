// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package account

import (
	"database/sql"
	"github.com/angelokurtis/go-laboratory/database-locking/internal/metrics"
	"github.com/angelokurtis/go-laboratory/database-locking/internal/mysql"
	"github.com/angelokurtis/go-laboratory/database-locking/internal/persistence"
	"github.com/google/wire"
)

// Injectors from wire.go:

func initialize() (*X, func(), error) {
	db, err := mysql.NewDB()
	if err != nil {
		return nil, nil, err
	}

	queries := persistence.New(db)
	optimisticRepository := NewOptimisticRepository(queries)
	pessimisticRepository := NewPessimisticRepository(db, queries)
	x := &X{
		OptimisticRepository:  optimisticRepository,
		PessimisticRepository: pessimisticRepository,
	}

	return x, func() {
	}, nil
}

// wire.go:

var providers = wire.NewSet(metrics.NewHandler, mysql.NewDB, NewOptimisticRepository,
	NewPessimisticRepository, persistence.New, wire.Struct(new(X), "*"), wire.Bind(new(persistence.DBTX), new(*sql.DB)),
)

type X struct {
	*OptimisticRepository
	*PessimisticRepository
}
