// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/angelokurtis/go-laboratory/manifestival/internal/fatality"
	"github.com/angelokurtis/go-laboratory/manifestival/internal/kubernetes"
	"github.com/angelokurtis/go-laboratory/manifestival/internal/logging"
	"github.com/angelokurtis/go-laboratory/manifestival/internal/manifestival"
	"github.com/angelokurtis/go-laboratory/manifestival/internal/maxprocs"
	"github.com/google/wire"
	"log/slog"
)

// Injectors from wire.go:

func initialize() (*Application, func(), error) {
	config, err := kubernetes.NewConfig()
	if err != nil {
		return nil, nil, err
	}

	client, err := manifestival.NewClient(config)
	if err != nil {
		return nil, nil, err
	}

	logger := slog.Default()
	handler := logging.NewHandler(logger)
	logrLogger := manifestival.NewLogger(handler)
	factory := manifestival.NewFactory(client, logrLogger)
	application := &Application{
		Factory: factory,
	}

	return application, func() {
	}, nil
}

// wire.go:

var providers = wire.NewSet(kubernetes.NewConfig, logging.NewHandler, manifestival.NewClient, manifestival.NewLogger, manifestival.NewFactory, slog.Default)

type Application struct {
	*manifestival.Factory
}

func init() {
	logger := logging.Setup()
	if err := maxprocs.SetupWithLogger(logger); err != nil {
		fatality.With(err)
	}
}
